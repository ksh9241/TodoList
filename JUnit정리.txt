JUnit5 란? 
JUnit Platform 이 존재 하고 그 위에 Jupiter와 Vintage를 올릴 수 있는 구조이다.
이 세 가지는 JUnit 세부 모듈이다.

JUnit Platform : JUnit으로 작성한 테스트 코드를 실행해주는 런처를 제공한다.
Jupiter와 Vintage : JUnit 이 제공하는 TestEngine Api 구현체다.

어노테이션 
- @Test
- @BeforeAll : 해당 클래스에 위치한 모든 테스트 메서드 실행 전 딱 한번만 실행되는 메서드
- @AfterAll : 해당 클래스에 위치한 모든 테스트 메서드 실행 후 딱 한번만 실행되는 메서드
- @Disabled : 테스트케이스를 실행시키지 않을 때 사용
- @RepeatedTest : 특정 테스트를 반복 시키고 싶을 때 사용함.
- @ParameterizedTest : 테스트에 여러 다른 매개변수를 대입해가며 반복실행할 때 사용한다.
- @Nested : 테스트 클래스 안에서 내부 클래스를 정의해 테스트를 계층화 할 때 사용


/**
 * 클래스 어노테이션 
 * @SpringBootTest
 * - 통합 테스트 용도로 사용됨
 * - @SpringBootApplication을 찾아가 하위의 모든 Bean을 스캔하여 로드함
 * - 그 후 Test용 Application Context를 만들어 Bean을 추가하고 MockBean을 찾아 교체
 * 
 * @ExtendWith
 * - JUnit4에서 @RunWith로 사용되던 어노테이션이 변경됨.
 * - @ExtendWith는 메인으로 실행될 Class를 지정할 수 있음
 * - @SpringBootTest는 기본적으로 @ExtendWith가 추가되어 있음.
 * 
 * @WebMvcTest(Class명.class)
 * - ()에 작성된 클래스만 실제로 로드하여 테스트를 진행
 * - 매개변수를 지정해주지 않으면 컨트롤러와 연관된 Bean이 모두 로드됨
 * - 스프링의 모든 Bean을 로드하는 @SpringBootTest 대신 컨트롤러 관련 코드만 테스트할 경우 사용
 * 
 * */

/***
 * 인스턴스 어노테이션
 * @MockBean
 * - 테스트할 클래스에서 주입받고 있는 객체에 대해 가짜 객체를 생성해주는 어노테이션
 * - 해당 객체는 실제 행위를 하지 않음
 * - given() 메서드를 활용하여 가짜 객체의 동작에 대해 정의하여 사용할 수 있음
 * 
 * @AutoConfigureMockMvc
 * - spring.test.mockmvc 의 설정을 로드하면서 MockMvc의 의존성을 자동으로 주입
 * - MockMvc 클래스는 REST API 테스트를 할 수 있는 클래스
 */